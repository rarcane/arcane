/* --- CONSTANTS --- */

MAX_ENTITIES_PER_CHUNK :: 256
MAX_ACTIVE_ENTITIES :: 1024
MAX_OVERLAPPING_COLLIDERS :: 50
MAX_COLLISION_PAIRS :: 2048
MAX_ENTITY_REFERENCES :: 10
MAX_SUB_COLLIDERS :: 3
MAX_STORAGE_SIZE :: 30
MAX_PARTICLE_AMOUNT :: 300
MAX_WORLD_CHUNKS :: 128
CHUNK_SIZE :: 256
CELL_CHUNK_SIZE :: 128
MAX_PIXEL_CLUSTER_LENGTH :: 64
MAX_DYNAMIC_CELLS :: 16384â€¬


/* --- ENUMS --- */

GeneralisedEntityType :: enum
{
    undefined,
	character,
	monster,
	animal,
	item,
	storage,
	resource,
	scenic,
	ground,
	pixel_object,
}

EditorState :: enum
{
	none,
	entity,
	terrain,
	collision,
}


/* --- FLAGS --- */

EntityFlags :: flags
{
	no_delete,
}

ColliderFlags :: flags
{
	ground,
	player,
	entity,
	item,
	trigger,
}

AnimationFlags :: flags
{
	playing,
	reversing,
	repeat,
}

ParticleEmitterFlags :: flags
{
	repeat,
}

PixelFlags :: flags
{
	apply_gravity,
}

CellFlags :: flags
{
	no_gravity,
}

EditorFlags :: flags
{
	draw_world,
	draw_collision,
	draw_chunk_grid,
}

ItemFlags :: flags
{
	resource,
	sword,
	bouncy,
}
ITEM_FLAGS_HOTBARABLE :: (ITEM_FLAGS_sword)

/* --- X-Macros --- */

@XMacro
StaticSpriteData :: struct
{
	texture_path : char[50];
	source : v4;
	offset : v2;
	@Ignore
		texture_atlas : *Ts2dTexture;
}
@XMacro
StaticSprite :: enum
{
	@Data("'invalid_texture'", "{0.0f, 0.0f, 64.0f, 64.0f}", "{0.0f, 0.0f}")
		INVALID,
		
	@Data("'scenic/biome_ground'", "{0.0f, 0.0f, 100.0f, 150.0f}", "{0.0f, 147.0f}")
		ground_arctic,
	@Data("'scenic/biome_ground'", "{100.0f, 0.0f, 100.0f, 150.0f}", "{0.0f, 147.0f}")
		ground_desert,
	@Data("'scenic/biome_ground'", "{200.0f, 0.0f, 100.0f, 150.0f}", "{0.0f, 147.0f}")
		ground_plains,
	
	@Data("'entity/player/temp_player'", "{0.0f, 0.0f, 14.0f, 35.0f}", "{0.0f, 0.0f}")
		player,
	
	@Data("'item/flint_sword'", "{0.0f, 0.0f, 16.0f, 16.0f}", "{6.0f, 2.0f}")
		flint_sword_icon,
	@Data("'item/flint_sword_ground'", "{0.0f, 0.0f, 24.0f, 24.0f}", "{0.0f, 0.0f}")
		flint_sword_ground,
	
	// Background
	@Data("'scenic/mountains'", "{0.0f, 0.0f, 600.0f, 160.0f}", "{0.0f, 5.0f}")
		far_mountains,
	@Data("'scenic/mountains'", "{0.0f, 160.0f, 600.0f, 90.0f}", "{0.0f, 10.0f}")
		mid_mountains,
	
	@Data("'scenic/clouds'", "{0.0f, 0.0f, 80.0f, 25.0f}", "{0.0f, 0.0f}")
		cloud_v1,
	@Data("'scenic/clouds'", "{80.0f, 0.0f, 80.0f, 25.0f}", "{0.0f, 0.0f}")
		cloud_v2,
	@Data("'scenic/clouds'", "{160.0f, 0.0f, 80.0f, 25.0f}", "{0.0f, 0.0f}")
		cloud_v3,
	@Data("'scenic/clouds'", "{0.0f, 25.0f, 80.0f, 25.0f}", "{0.0f, 0.0f}")
		cloud_v4,
	@Data("'scenic/clouds'", "{80.0f, 25.0f, 80.0f, 25.0f}", "{0.0f, 0.0f}")
		cloud_v5,
	@Data("'scenic/clouds'", "{160.0f, 25.0f, 80.0f, 25.0f}", "{0.0f, 0.0f}")
		cloud_v6,
	
	// Forest
	@Data("'scenic/forest_ground'", "{0.0f, 40.0f, 100.0f, 90.0f }", "{20.0f, 87.0f}")	
		ground_forest_flat,
	@Data("'scenic/forest_ground'", "{100.0f, 25.0f, 100.0f, 105.0f}", "{0.0f, 87.0f}")
		ground_forest_10_degree,
	
	@Data("'scenic/forest_ground'", "{0.0f, 0.0f, 100.0f, 4.0f}", "{0.0f, 0.0f}")
		ground_rocks_v1,
	@Data("'scenic/forest_ground'", "{0.0f, 4.0f, 100.0f, 4.0f}", "{0.0f, 0.0f}")
		ground_rocks_v2,
	
	@Data("'scenic/trees/pine_tree'", "{0.0f, 0.0f, 90.0f, 170.0f}", "{0.0f, 0.0f}")
		pine_tree_v1,
	
	@Data("'scenic/background/bg1_hills'", "{0.0f, 0.0f, 200.0f, 35.0f}", "{0.0f, 20.0f}")
		hills_1_v1,
	@Data("'scenic/background/bg1_hills'", "{0.0f, 35.0f, 200.0f, 35.0f}", "{0.0f, 20.0f}")
		
	
	@Data("'scenic/background/vegetation'", "{0.0f, 0.0f, 50.0f, 25.0f}", "{0.0f, 0.0f}")
		bg1_shrub_v1,
	@Data("'scenic/background/vegetation'", "{50.0f, 0.0f, 50.0f, 25.0f}", "{0.0f, 0.0f}")
		bg1_shrub_v2,
	@Data("'scenic/background/vegetation'", "{100.0f, 0.0f, 50.0f, 25.0f}", "{0.0f, 0.0f}")
		bg1_shrub_v3,
	
	@Data("'scenic/background/vegetation'", "{75.0f, 25.0f, 20.0f, 40.0f}", "{0.0f, 0.0f}")
		bg1_sapling_v1,
	@Data("'scenic/background/vegetation'", "{95.0f, 25.0f, 20.0f, 40.0f}", "{0.0f, 0.0f}")
		bg1_sapling_v2,
	@Data("'scenic/background/vegetation'", "{115.0f, 25.0f, 20.0f, 40.0f}", "{0.0f, 0.0f}")
		bg1_sapling_v3,
	
	@Data("'scenic/background/bg1_pine_tree'", "{0.0f, 0.0f, 90.0f, 170.0f}", "{0.0f, 0.0f}")
		bg1_pine_tree_v1,
	@Data("'scenic/background/bg1_pine_tree'", "{90.0f, 0.0f, 90.0f, 170.0f}", "{0.0f, 0.0f}")
		bg1_pine_tree_v2,
	
	@Data("'scenic/background/bg2_hills'", "{0.0f, 0.0f, 200.0f, 40.0f}", "{0.0f, 21.0f}")
		bg2_hills_v1,
	@Data("'scenic/background/bg2_hills'", "{0.0f, 40.0f, 200.0f, 40.0f}", "{0.0f, 21.0f}")
		bg2_hills_v2,
	
	@Data("'scenic/background/vegetation'", "{0.0f, 25.0f, 25.0f, 20.0f}", "{0.0f, 0.0f}")
		bg2_shrub_v1,
	@Data("'scenic/background/vegetation'", "{25.0f, 25.0f, 25.0f, 20.0f}", "{0.0f, 0.0f}")
		bg2_shrub_v2,
	@Data("'scenic/background/vegetation'", "{50.0f, 25.0f, 25.0f, 20.0f}", "{0.0f, 0.0f}")
		bg2_shrub_v3,
	
	@Data("'scenic/background/bg2_pine_tree'", "{0.0f, 0.0f, 40.0f, 110.0f}", "{0.0f, 0.0f}")
		bg2_pine_tree_v1,
	@Data("'scenic/background/bg2_pine_tree'", "{40.0f, 0.0f, 40.0f, 110.0f}", "{0.0f, 0.0f}")
		bg2_pine_tree_v2,
	
	@Data("'scenic/background/bg3_hills'", "{0.0f, 0.0f, 200.0f, 40.0f}", "{0.0f, 17.0f}")
		bg3_hills_v1,
	@Data("'scenic/background/vegetation'", "{0.0f, 45.0f, 15.0f, 10.0f}", "{0.0f, 0.0f}")
		bg3_shrub_v1,
	@Data("'scenic/background/vegetation'", "{15.0f, 45.0f, 15.0f, 10.0f}", "{0.0f, 0.0f}")
		bg3_shrub_v2,
	@Data("'scenic/background/vegetation'", "{30.0f, 45.0f, 15.0f, 10.0f}", "{0.0f, 0.0f}")
		bg3_shrub_v3,
	@Data("'scenic/background/vegetation'", "{45.0f, 45.0f, 15.0f, 10.0f}", "{0.0f, 0.0f}")
		bg3_shrub_v4,
	
	@Data("'scenic/background/bg3_pine_tree'", "{0.0f, 0.0f, 20.0f, 50.0f}", "{0.0f, 0.0f}")
		bg3_pine_tree_v1,
	@Data("'scenic/background/bg3_pine_tree'", "{20.0f, 0.0f, 20.0f, 50.0f}", "{0.0f, 0.0f}")
		bg3_pine_tree_v2,
	@Data("'scenic/background/bg3_pine_tree'", "{40.0f, 0.0f, 20.0f, 50.0f}", "{0.0f, 0.0f}")
		bg3_pine_tree_v3,
	@Data("'scenic/background/bg3_pine_tree'", "{60.0f, 0.0f, 20.0f, 50.0f}", "{0.0f, 0.0f}")
		bg3_pine_tree_v4,
	@Data("'scenic/background/bg3_pine_tree'", "{80.0f, 0.0f, 20.0f, 50.0f}", "{0.0f, 0.0f}")
		bg3_pine_tree_v5,
	@Data("'scenic/background/bg3_pine_tree'", "{100.0f, 0.0f, 20.0f, 50.0f}", "{0.0f, 0.0f}")
		bg3_pine_tree_v6,
	@Data("'scenic/background/bg3_pine_tree'", "{120.0f, 0.0f, 20.0f, 50.0f}", "{0.0f, 0.0f}")
		bg3_pine_tree_v7,
	@Data("'scenic/background/bg3_pine_tree'", "{140.0f, 0.0f, 20.0f, 50.0f}", "{0.0f, 0.0f}")
		bg3_pine_tree_v8,
	
	// Icons
	@Data("'icon/axis_icons'", "{0.0f, 0.0f, 7.0f, 40.0f}", "{0.0f, 0.0f}")
		y_axis_arrow_icon,
	@Data("'icon/axis_icons'", "{0.0f, 33.0f, 40.0f, 7.0f}", "{0.0f, 0.0f}")
		x_axis_arrow_icon,
	@Data("'icon/axis_icons'", "{33.0f, 0.0f, 7.0f, 7.0f}", "{0.0f, 0.0f}")
		circle_icon,
}

@XMacro
DynamicSpriteData :: struct
{
	texture_path : char[50];
	source : v4;
	offset : v2;
	frames : i32;
	frame_interval : f32;
	
	@Ignore
		texture_atlas : *Ts2dTexture;
}
@XMacro
DynamicSprite :: enum
{
	@Data("'invalid_texture'", "{0.0f, 0.0f, 64.0f, 64.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		INVALID,
		
	@Data("'entity/player/player_animations'", "{0.0f, 192.0f, 64.0f, 64.0f}", "{0.0f, 0.0f}", 4, 0.15f)
		player_idle,
	@Data("'entity/player/player_animations'", "{0.0f, 256.0f, 64.0f, 64.0f}", "{0.0f, 0.0f}", 8, 0.1f)
		player_walking,
	@Data("'entity/player/player_animations'", "{0.0f, 320.0f, 64.0f, 64.0f}", "{0.0f, 0.0f}", 8, 0.1f)
		player_sprinting,
		
	@Data("'scenic/trees/birch_idle'", "{0.0f, 0.0f, 120.0f, 160.0f}", "{0.0f, 0.0f}", 6, 0.1f)
		birch_tree1,
	@Data("'scenic/trees/birch_idle'", "{0.0f, 160.0f, 120.0f, 160.0f}", "{0.0f, 0.0f}", 6, 0.1f)
		birch_tree2,
	@Data("'scenic/trees/birch_idle'", "{0.0f, 320.0f, 120.0f, 160.0f}", "{0.0f, 0.0f}", 6, 0.1f)
		birch_tree3,
	@Data("'scenic/trees/birch_idle'", "{0.0f, 480.0f, 120.0f, 160.0f}", "{0.0f, 0.0f}", 6, 0.1f)
		birch_tree4,
}

MAX_SUB_SPRITES :: 5

@XMacro
ArcEntityAnimationStateData :: struct
{
	dynamic_sprite : DynamicSprite;
}
@XMacro
ArcEntityAnimationState :: enum
{
	@Data(DYNAMIC_SPRITE_player_idle)
		player_idle,
	@Data(DYNAMIC_SPRITE_player_walking)
		player_walking,
	@Data(DYNAMIC_SPRITE_player_sprinting)
		player_sprinting,
}

@XMacro
ArcEntityTypeData :: struct
{
	general_states : *char[10];
	animation_states : ArcEntityAnimationState[20];
}
@XMacro
ArcEntityType :: enum
{
	@Data("{'Idle', 'Walking', 'Sprinting'}", "{ARC_ENTITY_ANIMATION_STATE_player_idle, ARC_ENTITY_ANIMATION_STATE_player_walking, ARC_ENTITY_ANIMATION_STATE_player_sprinting}")
		player,
}

@XMacro
ItemTypeData :: struct
{
	print_name : char[20];
	icon_sprite : StaticSprite;
	ground_sprite : StaticSprite;
	max_stack_size : i32;
	flags : ItemFlags;
}
@XMacro
ItemType :: enum
{
	@Data("'Flint Sword'", STATIC_SPRITE_flint_sword_icon, STATIC_SPRITE_flint_sword_ground, 1, ITEM_FLAGS_sword)
		flint_sword,
}

FLUID_COMPRESSION :: 0.01f

SolidMaterial :: struct
{
	position : v2;
	velocity : v2;
	hardness : f32;
}
FluidMatieral :: struct
{
	//flow : v2;
	pressure : f32;
	mass : f32;
	new_mass : f32;
}
CellProperties :: union
{
	solid : SolidMaterial;
	fluid : FluidMatieral;
}
CellPropertiesType :: enum
{
	solid,
	fluid,
}

@XMacro
CellMaterialTypeData :: struct
{
	default_mass : f32;
	restitution : f32;
	max_height : i32;
	crust_depth : i32;
	properties_type : CellPropertiesType;
}
@XMacro
CellMaterialType :: enum
{
	@Data(0.0f, 0.0f, 0, 0, CELL_PROPERTIES_TYPE_fluid)
		air,
	@Data(5.0f, 0.0f, 3, 3, CELL_PROPERTIES_TYPE_solid)
		dirt,
	@Data(3.0f, 0.0f, 1, 5, CELL_PROPERTIES_TYPE_solid)
		sand,
	@Data(10.0f, 1.50f, 0, 0, CELL_PROPERTIES_TYPE_fluid)
		water,
}

/* --- COMPONENTS --- */

@ForwardDeclare(Entity)
ForwardEntity :: _;

@Component
Position :: struct
{
	position : v2;
}

@Component
Sprite :: struct
{
	sprite_data : SpriteData;
	@Editable
	is_flipped : b8;
	is_background_sprite : b8; // Temp solution
}

@Component
Animation :: struct
{
	flags : AnimationFlags;
	current_frame : i32;
	interval_mult : f32;
	frame_start_time : f32;
}

Line :: struct
{
	p1 : v2;
	p2 : v2;
}

c2Shape :: union
{
	aabb : c2AABB;
	capsule : c2Capsule;
	circle : c2Circle;
	poly : c2Poly;
	line : Line;
}

c2ShapeType :: enum
{
	aabb,
	capsule,
	circle,
	poly,
	line,
}

PhysicsMaterial :: struct
{
	density : f32;
	restitution : f32;
	static_friction : f32;
	dynamic_friction : f32;
}

MassData :: struct
{
	mass : f32;
	inv_mass : f32;
}

@Component
PhysicsBody :: struct
{
	shape : c2Shape;
	shape_type : c2ShapeType;
	material : PhysicsMaterial;
	mass_data : MassData;
	velocity : v2;
	force : v2;
	gravity_multiplier : f32;
}

@Component
Movement :: struct
{
	axis_x : f32;
	move_speed : f32;
	move_speed_mult : f32;
}

@Component
ArcEntity :: struct
{
	entity_type : ArcEntityType;
	current_general_state : *char;
	current_animation_state : ArcEntityAnimationState;
}

@Component
Item :: struct
{
	item_type : ItemType;
	stack_size : i32;
}

@Component
Trigger :: struct
{
	enter_trigger_callback : TriggerCallback;
	exit_trigger_callback : TriggerCallback;
	previous_overlaps : OverlappedColliderInfo[MAX_OVERLAPPING_COLLIDERS];
	previous_overlaps_count : i32;
	trigger_against : b8;
}

@Component
Storage :: struct
{
	storage_size : i32;
	items : *ItemComponent[MAX_STORAGE_SIZE];
}

@Component
Parallax :: struct
{
	parallax_amount : v2;
	desired_position : v2;
}

@Component
ParticleEmitter :: struct
{
	life_time : f32;
	start_time : f32;
	flags : ParticleEmitterFlags;
	particles : Particle[MAX_PARTICLE_AMOUNT]; // Need to put this somewhere else?
	particle_count : i32;
	free_particle_index : i32;
	begin_callback : EmitterBeginCallback;
	finish_callback : EmitterFinishCallback;
}

@ForwardDeclare(ChunkData)
ForwardChunk :: _;

@GenerateComponentCode
Dummy2 :: _;


/* --- ENTITIES --- */

@UniqueEntity(1, character)
Character :: struct
{
	@ComponentList(Position, Sprite, Animation, PhysicsBody, Movement, ArcEntity)
	dummy : Dummy;
}

@UniqueEntity(50, scenic)
Cloud :: struct
{
	@ComponentList(Position, Sprite, Parallax)
	dummy : Dummy;
}

@UniqueEntity(1024, ground)
GroundSegment :: struct
{
	@ComponentList(Position, PhysicsBody)
	dummy : Dummy;
}

@GenerateEntityCode
Dummy3 :: _;

Entity :: struct
{
	entity_id : i32;
	name : char[20];
	generalised_type : GeneralisedEntityType;
	
	unique_entity : *void;
	type : EntityType;
	
	flags : EntityFlags;
	components : *void[COMPONENT_MAX];
	active_chunk : *ChunkData;
}


/* --- WORLD DATA --- */

@ForwardDeclare(Cell)
ForwardCell :: _;

CellMaterial :: struct
{
	id : i32;
	parent_cell : *Cell;
	material_type : CellMaterialType;
	flags : CellFlags;
	
	mass : f32;
	
	properties_type : CellPropertiesType;
	properties : CellProperties;
	
	is_material_dynamic : b8;
	has_been_updated : b8;
	
	idle_start : f32;
}

@ForwardDeclare(CellChunk)
ForwardCellChunk :: _;

Cell :: struct
{
	parent_cell_chunk : *CellChunk;
	x_index : i32;
	y_index : i32;
	
	material : *CellMaterial;
}

CellChunk :: struct // Why tf did I create these and organise cells into them? The textures should be a separate division thing entirely and not be bound to the resolution of any given chunk size.
{
	parent_chunk : *ChunkData;
	x_index : i32;
	y_index : i32;
	
	cells : Cell[CELL_CHUNK_SIZE][CELL_CHUNK_SIZE];
	
	texture : Ts2dTexture;
}

ChunkData :: struct
{
	is_valid : b8;
	entity_ids : i32[MAX_ENTITIES_PER_CHUNK];
	entity_count : i32;
	x_index : i32;
	y_index : i32;
	
	cell_chunks : CellChunk[CHUNK_SIZE / CELL_CHUNK_SIZE][CHUNK_SIZE / CELL_CHUNK_SIZE];
	
	cell_materials : CellMaterial[CHUNK_SIZE * CHUNK_SIZE];
	cell_material_count : i32;
	free_cell_material_id : i32;
	
	dynamic_cell_materials : *CellMaterial[MAX_DYNAMIC_CELLS];
	dynamic_cell_material_count : i32;
}

// NOTE(tjr): World-save specific data
@Serialisable
WorldData :: struct
{
	elapsed_world_time : f32;
	
	active_chunks : ChunkData[MAX_WORLD_CHUNKS];
	active_chunk_count : i32;
	floating_chunk : ChunkData;
	
	@GenerateUniqueEntityArrays
	entities : Entity[MAX_ACTIVE_ENTITIES];
	entity_count : i32;
	free_entity_id : i32;
	
	entity_components : ComponentSet;
}

// NOTE(tjr): Game client data
ClientData :: struct
{
	/* ~ Player-controlled options ~ */
	bloom : b32;
	current_level : char[20];
	
	res_path : *char;

	/* ~ Editor ~ */
	editor_state : EditorState;
	editor_flags : EditorFlags;
	// ~ Entity Editor
	selected_entity : *Entity;
	// ~ Collision editor
	selected_ground_seg : *GroundSegmentEntity;
	is_seg_grabbed : b8;
	grabbed_seg_pos : v2;
}