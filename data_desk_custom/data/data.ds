/* --- CONSTANTS --- */

MAX_OVERLAPPING_COLLIDERS :: 50
MAX_COLLISION_PAIRS :: 2048
MAX_STORAGE_SIZE :: 30
MAX_PARTICLE_AMOUNT :: 300
MAX_WORLD_CHUNKS :: 128
CHUNK_SIZE :: 256
MAX_DYNAMIC_CELLS :: 16384


/* --- ENUMS --- */

GeneralisedEntityType :: enum
{
    undefined,
	character,
	monster,
	animal,
	item,
	storage,
	resource,
	scenic,
	ground,
	pixel_object,
	structure,
}

EditorState :: enum
{
	none,
	general,
	terrain,
}


/* --- FLAGS --- */

ColliderFlags :: flags
{
	ground,
	player,
	entity,
	item,
	trigger,
}

AnimationFlags :: flags
{
	playing,
	reversing,
	repeat,
}

ParticleEmitterFlags :: flags
{
	repeat,
}

PixelFlags :: flags
{
	apply_gravity,
}

DebugFlags :: flags
{
	draw_collision,
	draw_chunk_grid,
	disable_draw_terrain,
}

//~Sprites
@XMacro
SpriteData :: struct
{
	texture_path : char[50];
	source : v4;
	offset : v2;
	
	frames : i32;
	frame_interval : f32;
	
	@Ignore
		texture_atlas : *Ts2dTexture;
}
@XMacro
Sprite :: enum
{
	@Data("'default_texture'", "{0.0f, 0.0f, 64.0f, 64.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		default,
	
	@Data("'scenic/biome_ground'", "{0.0f, 0.0f, 100.0f, 150.0f}", "{0.0f, 147.0f}", 0, 0.0f)
		ground_arctic,
	@Data("'scenic/biome_ground'", "{100.0f, 0.0f, 100.0f, 150.0f}", "{0.0f, 147.0f}", 0, 0.0f)
		ground_desert,
	@Data("'scenic/biome_ground'", "{200.0f, 0.0f, 100.0f, 150.0f}", "{0.0f, 147.0f}", 0, 0.0f)
		ground_plains,
	
	@Data("'entity/player/temp_player'", "{0.0f, 0.0f, 14.0f, 35.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		player,
	
	// Background
	@Data("'scenic/mountains'", "{0.0f, 0.0f, 600.0f, 160.0f}", "{0.0f, 5.0f}", 0, 0.0f)
		far_mountains,
	@Data("'scenic/mountains'", "{0.0f, 160.0f, 600.0f, 90.0f}", "{0.0f, 10.0f}", 0, 0.0f)
		mid_mountains,
	
	@Data("'scenic/clouds'", "{0.0f, 0.0f, 80.0f, 25.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		cloud_v1,
	@Data("'scenic/clouds'", "{80.0f, 0.0f, 80.0f, 25.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		cloud_v2,
	@Data("'scenic/clouds'", "{160.0f, 0.0f, 80.0f, 25.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		cloud_v3,
	@Data("'scenic/clouds'", "{0.0f, 25.0f, 80.0f, 25.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		cloud_v4,
	@Data("'scenic/clouds'", "{80.0f, 25.0f, 80.0f, 25.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		cloud_v5,
	@Data("'scenic/clouds'", "{160.0f, 25.0f, 80.0f, 25.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		cloud_v6,
	
	// Forest
	@Data("'scenic/forest_ground'", "{0.0f, 40.0f, 100.0f, 90.0f }", "{20.0f, 87.0f}", 0, 0.0f)
		ground_forest_flat,
	@Data("'scenic/forest_ground'", "{100.0f, 25.0f, 100.0f, 105.0f}", "{0.0f, 87.0f}", 0, 0.0f)
		ground_forest_10_degree,
	
	@Data("'scenic/forest_ground'", "{0.0f, 0.0f, 100.0f, 4.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		ground_rocks_v1,
	@Data("'scenic/forest_ground'", "{0.0f, 4.0f, 100.0f, 4.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		ground_rocks_v2,
	
	@Data("'scenic/trees/pine_tree'", "{0.0f, 0.0f, 90.0f, 170.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		pine_tree_v1,
	
	@Data("'scenic/background/bg1_hills'", "{0.0f, 0.0f, 200.0f, 35.0f}", "{0.0f, 20.0f}", 0, 0.0f)
		hills_1_v1,
	@Data("'scenic/background/bg1_hills'", "{0.0f, 35.0f, 200.0f, 35.0f}", "{0.0f, 20.0f}", 0, 0.0f)
		hills_1_v2,
	
	@Data("'scenic/background/vegetation'", "{0.0f, 0.0f, 50.0f, 25.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		bg1_shrub_v1,
	@Data("'scenic/background/vegetation'", "{50.0f, 0.0f, 50.0f, 25.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		bg1_shrub_v2,
	@Data("'scenic/background/vegetation'", "{100.0f, 0.0f, 50.0f, 25.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		bg1_shrub_v3,
	
	@Data("'scenic/background/vegetation'", "{75.0f, 25.0f, 20.0f, 40.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		bg1_sapling_v1,
	@Data("'scenic/background/vegetation'", "{95.0f, 25.0f, 20.0f, 40.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		bg1_sapling_v2,
	@Data("'scenic/background/vegetation'", "{115.0f, 25.0f, 20.0f, 40.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		bg1_sapling_v3,
	
	@Data("'scenic/background/bg1_pine_tree'", "{0.0f, 0.0f, 90.0f, 170.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		bg1_pine_tree_v1,
	@Data("'scenic/background/bg1_pine_tree'", "{90.0f, 0.0f, 90.0f, 170.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		bg1_pine_tree_v2,
	
	@Data("'scenic/background/bg2_hills'", "{0.0f, 0.0f, 200.0f, 40.0f}", "{0.0f, 21.0f}", 0, 0.0f)
		bg2_hills_v1,
	@Data("'scenic/background/bg2_hills'", "{0.0f, 40.0f, 200.0f, 40.0f}", "{0.0f, 21.0f}", 0, 0.0f)
		bg2_hills_v2,
	
	@Data("'scenic/background/vegetation'", "{0.0f, 25.0f, 25.0f, 20.0f}", "{0.0f, -13.0f}", 0, 0.0f)
		bg2_shrub_v1,
	@Data("'scenic/background/vegetation'", "{25.0f, 25.0f, 25.0f, 20.0f}", "{0.0f, -13.0f}", 0, 0.0f)
		bg2_shrub_v2,
	@Data("'scenic/background/vegetation'", "{50.0f, 25.0f, 25.0f, 20.0f}", "{0.0f, -13.0f}", 0, 0.0f)
		bg2_shrub_v3,
	
	@Data("'scenic/background/bg2_pine_tree'", "{0.0f, 0.0f, 40.0f, 110.0f}", "{0.0f, -5.0f}", 0, 0.0f)
		bg2_pine_tree_v1,
	@Data("'scenic/background/bg2_pine_tree'", "{40.0f, 0.0f, 40.0f, 110.0f}", "{0.0f, -5.0f}", 0, 0.0f)
		bg2_pine_tree_v2,
	
	@Data("'scenic/background/bg3_hills'", "{0.0f, 0.0f, 200.0f, 40.0f}", "{0.0f, 17.0f}", 0, 0.0f)
		bg3_hills_v1,
	@Data("'scenic/background/vegetation'", "{0.0f, 45.0f, 15.0f, 10.0f}", "{0.0f, -20.0f}", 0, 0.0f)
		bg3_shrub_v1,
	@Data("'scenic/background/vegetation'", "{15.0f, 45.0f, 15.0f, 10.0f}", "{0.0f, -20.0f}", 0, 0.0f)
		bg3_shrub_v2,
	@Data("'scenic/background/vegetation'", "{30.0f, 45.0f, 15.0f, 10.0f}", "{0.0f, -20.0f}", 0, 0.0f)
		bg3_shrub_v3,
	@Data("'scenic/background/vegetation'", "{45.0f, 45.0f, 15.0f, 10.0f}", "{0.0f, -20.0f}", 0, 0.0f)
		bg3_shrub_v4,
	
	@Data("'scenic/background/bg3_pine_tree'", "{0.0f, 0.0f, 20.0f, 50.0f}", "{0.0f, -18.0f}", 0, 0.0f)
		bg3_pine_tree_v1,
	@Data("'scenic/background/bg3_pine_tree'", "{20.0f, 0.0f, 20.0f, 50.0f}", "{0.0f, -18.0f}", 0, 0.0f)
		bg3_pine_tree_v2,
	@Data("'scenic/background/bg3_pine_tree'", "{40.0f, 0.0f, 20.0f, 50.0f}", "{0.0f, -18.0f}", 0, 0.0f)
		bg3_pine_tree_v3,
	@Data("'scenic/background/bg3_pine_tree'", "{60.0f, 0.0f, 20.0f, 50.0f}", "{0.0f, -18.0f}", 0, 0.0f)
		bg3_pine_tree_v4,
	@Data("'scenic/background/bg3_pine_tree'", "{80.0f, 0.0f, 20.0f, 50.0f}", "{0.0f, -18.0f}", 0, 0.0f)
		bg3_pine_tree_v5,
	@Data("'scenic/background/bg3_pine_tree'", "{100.0f, 0.0f, 20.0f, 50.0f}", "{0.0f, -18.0f}", 0, 0.0f)
		bg3_pine_tree_v6,
	@Data("'scenic/background/bg3_pine_tree'", "{120.0f, 0.0f, 20.0f, 50.0f}", "{0.0f, -18.0f}", 0, 0.0f)
		bg3_pine_tree_v7,
	@Data("'scenic/background/bg3_pine_tree'", "{140.0f, 0.0f, 20.0f, 50.0f}", "{0.0f, -18.0f}", 0, 0.0f)
		bg3_pine_tree_v8,
	
	// Icons
	@Data("'icon/axis_icons'", "{0.0f, 0.0f, 7.0f, 40.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		y_axis_arrow_icon,
	@Data("'icon/axis_icons'", "{0.0f, 33.0f, 40.0f, 7.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		x_axis_arrow_icon,
	@Data("'icon/axis_icons'", "{33.0f, 0.0f, 7.0f, 7.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		circle_icon,
	@Data("'icon/side_arrow'", "{0.0f, 0.0f, 5.0f, 9.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		side_arrow,
	@Data("'icon/test_icon'", "{0.0f, 0.0f, 64.0f, 64.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		test_icon,
	
	// NOTE(randy): Structures
	@Data("'structures/crafting_stump'", "{0.0f, 0.0f, 32.0f, 32.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		crafting_stump,
	@Data("'structures/runic_enchanter'", "{0.0f, 0.0f, 32.0f, 32.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		runic_enchanter,
	
	// NOTE(randy): Items
	@Data("'item/flint_sword'", "{0.0f, 0.0f, 16.0f, 16.0f}", "{6.0f, 2.0f}", 0, 0.0f)
		flint_sword_icon,
	@Data("'item/flint_sword_ground'", "{0.0f, 0.0f, 24.0f, 24.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		flint_sword_ground,
	@Data("'item/flint_axe'", "{0.0f, 0.0f, 24.0f, 24.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		flint_axe,
	@Data("'item/flint'", "{0.0f, 0.0f, 16.0f, 16.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		flint,
	@Data("'item/twig'", "{0.0f, 0.0f, 16.0f, 16.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		twig,
	@Data("'item/crafting_tool'", "{0.0f, 0.0f, 16.0f, 16.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		crafting_tool,
	@Data("'item/test_chestpiece'", "{0.0f, 0.0f, 24.0f, 24.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		test_chestpiece,
	
	@Data("'item/shia'", "{0.0f, 0.0f, 800.0f, 1200.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		shia,
	@Data("'item/shia2'", "{0.0f, 0.0f, 590.0f, 631.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		shia2,
	@Data("'entity/ron'", "{0.0f, 0.0f, 512.0f, 512.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		dummy,
	
	//~Dynamic Sprites
	@Data("'invalid_texture'", "{0.0f, 0.0f, 64.0f, 64.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		default_dynamic,
	
	@Data("'entity/player/player_animations'", "{0.0f, 192.0f, 64.0f, 64.0f}", "{0.0f, 0.0f}", 4, 0.15f)
		player_idle,
	@Data("'entity/player/player_animations'", "{0.0f, 256.0f, 64.0f, 64.0f}", "{0.0f, 0.0f}", 8, 0.1f)
		player_walking,
	@Data("'entity/player/player_animations'", "{0.0f, 320.0f, 64.0f, 64.0f}", "{0.0f, 0.0f}", 8, 0.1f)
		player_sprinting,
	
	@Data("'scenic/trees/birch_idle'", "{0.0f, 0.0f, 120.0f, 160.0f}", "{0.0f, 0.0f}", 6, 0.1f)
		birch_tree1,
	@Data("'scenic/trees/birch_idle'", "{0.0f, 160.0f, 120.0f, 160.0f}", "{0.0f, 0.0f}", 6, 0.1f)
		birch_tree2,
	@Data("'scenic/trees/birch_idle'", "{0.0f, 320.0f, 120.0f, 160.0f}", "{0.0f, 0.0f}", 6, 0.1f)
		birch_tree3,
	@Data("'scenic/trees/birch_idle'", "{0.0f, 480.0f, 120.0f, 160.0f}", "{0.0f, 0.0f}", 6, 0.1f)
		birch_tree4,
}

RenderLayer :: enum
{
	none,
	
	front_UI,
	ingame_HUD,
	tree,
	shrub,
	
	// NOTE(randy): Everything beyond this point is parallaxable
	BG1_hill,
	BG1_tree,
	BG1_shrubs,
	BG1_saplings,
	
	BG2_hill,
	BG2_tree,
	BG2_shrubs,
	
	BG3_hill,
	BG3_trees,
	BG3_shrubs,
	
	close_mountains,
	far_mountains,
}

SpriteRender :: struct
{
	sprite : Sprite;
	offset : v2;
	render_layer : RenderLayer;
	scale : v2;
	tint : v4;
}

@XMacro
ArcEntityAnimationStateData :: struct
{
	dynamic_sprite : Sprite;
}
@XMacro
ArcEntityAnimationState :: enum
{
	@Data(SPRITE_player_idle)
		player_idle,
	@Data(SPRITE_player_walking)
		player_walking,
	@Data(SPRITE_player_sprinting)
		player_sprinting,
}

@XMacro
ArcEntityTypeData :: struct
{
	general_states : *char[10];
	animation_states : ArcEntityAnimationState[20];
}
@XMacro
ArcEntityType :: enum
{
	@Data("{'Idle', 'Walking', 'Sprinting'}", "{ARC_ENTITY_ANIMATION_STATE_player_idle, ARC_ENTITY_ANIMATION_STATE_player_walking, ARC_ENTITY_ANIMATION_STATE_player_sprinting}")
		player,
}


@XMacro
EnchantmentTypeData :: struct
{
	print_name : char[20];
}
@XMacro
EnchantmentType :: enum
{
	@Data("'none'")
		none,
	@Data("'enchantus prime'")
		test,
	@Data("'yeeeet'")
		yeet,
	@Data("'uuhhhhh'")
		uhhhh,
}

MAX_ENCHANTMENTS :: 8
Enchantment :: struct
{
	type : EnchantmentType;
	// ...
}

//~ Items
ItemCategory :: enum
{
	none,
	resource,
	lumber_axe,
	sword,
	
	helmet,
	chestpiece,
	gauntlet,
	leggings,
	boots,
	cloak,
}
ItemFlags :: flags
{
	bouncy,
	hotbarable,
	primary_usable,
	secondary_usable,
	tertiary_usable,
	enchantable,
}

@XMacro
ItemTypeData :: struct
{
	print_name : char[20];
	icon_sprite : Sprite;
	ground_sprite : Sprite;
	max_stack_size : i32;
	category : ItemCategory;
	flags : ItemFlags;
}
@XMacro
ItemType :: enum
{
	@Data("'none'", 0, 0, 0, 0, 0)
		none,
	@Data("'Flint Sword'", SPRITE_flint_sword_icon, SPRITE_flint_sword_ground, 1, ITEM_CATEGORY_sword, "ITEM_FLAGS_hotbarable | ITEM_FLAGS_primary_usable | ITEM_FLAGS_enchantable")
		flint_sword,
	@Data("'Flint Axe'", SPRITE_flint_axe, SPRITE_flint_axe, 1, ITEM_CATEGORY_lumber_axe, "ITEM_FLAGS_hotbarable | ITEM_FLAGS_primary_usable | ITEM_FLAGS_enchantable")
		flint_axe,
	@Data("'Flint'", SPRITE_flint, SPRITE_flint, 8, 0, 0)
		flint,
	@Data("'Twig'", SPRITE_twig, SPRITE_twig, 8, 0, 0)
		twig,
	@Data("'Crafting Tool'", SPRITE_crafting_tool, SPRITE_crafting_tool, 1, 0, ITEM_FLAGS_hotbarable)
		crafting_tool,
	@Data("'Test Chestpiece'", SPRITE_test_chestpiece, SPRITE_test_chestpiece, 1, ITEM_CATEGORY_chestpiece, 0)
		test_chestpiece,
}

Item :: struct
{
	type : ItemType;
	stack_size : i32;
	enchantments : Enchantment[ENCHANTMENT_TYPE_MAX];
}

//~Skill Tree
MAX_CHILD_SKILLS :: 4

@ForwardDeclareEnum(ElementalSkillType)
ForwardElementalSkillType :: _;

@XMacro
ElementalSkillTypeData :: struct
{
	print_name : char[20];
	cost : i32;
	child_skills : ElementalSkillType[MAX_CHILD_SKILLS];
	skill_image : Sprite;
}
@XMacro
ElementalSkillType :: enum
{
	@Data("'none'", 0, 0, 0)
		none,
	@Data("'Hand Flame'", 3, "{ ELEMENTAL_SKILL_TYPE_hand_flame_2, ELEMENTAL_SKILL_TYPE_hand_flame_3 }", SPRITE_test_icon)
		hand_flame,
	@Data("'Hand Flame 2'", 4, 0, 0)
		hand_flame_2,
	@Data("'Hand Flame 3'", 5, 0, 0)
		hand_flame_3,
	/*
		@Data("'Hand Flame 4'", 0)
			hand_flame_4,
	 */
}

@ForwardDeclare(Entity)
ForwardEntity :: _;

LineCol :: struct
{
	p1 : v2;
	p2 : v2;
}

MAX_LINE_SEGMENT_VERTICES :: 33
LineSegments :: struct
{
	count : i32;
	vertices : v2[MAX_LINE_SEGMENT_VERTICES];
}

c2Shape :: union
{
	aabb : c2AABB;
	capsule : c2Capsule;
	circle : c2Circle;
	poly : c2Poly;
	line : LineCol;
	line_segments : LineSegments;
}

c2ShapeType :: enum
{
	aabb,
	capsule,
	circle,
	poly,
	line,
	line_segments,
}

PhysicsMaterial :: struct
{
	density : f32;
	restitution : f32;
	static_friction : f32;
	dynamic_friction : f32;
}

MassData :: struct
{
	mass : f32;
	inv_mass : f32;
}

PhysicsBodyTypeFlags :: flags
{
	ground,
	item,
	character,
	station,
}



// NOTE(randy): $Crafting recipes
MAX_ITEMS_IN_CRAFTING_RECIPE :: 10
@XMacro
CraftingRecipeTypeData :: struct
{
	output : Item;
	input : Item[MAX_ITEMS_IN_CRAFTING_RECIPE];
}
@XMacro
CraftingRecipeType :: enum
{
	@Data("{0}", "{0}")
		none,
	@Data("{ITEM_TYPE_flint_axe, 1}", "{{ITEM_TYPE_flint, 1}, {ITEM_TYPE_twig, 1}}")
		flint_axe,
	@Data("{ITEM_TYPE_flint_sword, 1}", "{{ITEM_TYPE_flint, 3}, {ITEM_TYPE_twig, 2}}")
		flint_sword,
}



// NOTE(randy): $Strucutres
StructureCategory :: enum
{
	none,
	shia,
	crafting,
	base,
}

MAX_ITEMS_IN_BLUEPRINT_RECIPE :: 10
@XMacro
StructureTypeData :: struct
{
	print_name : char[20];
	category : StructureCategory;
	icon_sprite : Sprite;
	world_sprite : Sprite;
	recipe : Item[MAX_ITEMS_IN_BLUEPRINT_RECIPE];
	on_structure_build : StructureBuildCallback;
}
@XMacro
StructureType :: enum
{
	@Data("'none'", STRUCTURE_CATEGORY_none, 0, 0, "{0}", 0)
		none,
	@Data("'Shia'", STRUCTURE_CATEGORY_shia, SPRITE_shia, SPRITE_shia, "{0}", 0)
		shia,
	@Data("'Crafting Stump'", STRUCTURE_CATEGORY_crafting, SPRITE_crafting_stump, SPRITE_crafting_stump, "{ {ITEM_TYPE_twig, 5}, {ITEM_TYPE_flint, 2} }", 0)
		crafting_stump,
	@Data("'Shia 2'", STRUCTURE_CATEGORY_shia, SPRITE_shia2, SPRITE_shia2, "{0}", 0)
		shia2,
	@Data("'Base'", STRUCTURE_CATEGORY_base, SPRITE_shia2, SPRITE_shia2, "{0}", 0)
		base,
}

// NOTE(randy): $Spells
MagicType :: enum
{
	conscientiousness,
	elemental,
	big_spook,
}

ElementalAffinity :: enum
{
	earth,
	fire,
	water,
	air,
}

@XMacro
SpellTypeData :: struct
{
	print_name : char[20];
	magic_type : MagicType;
	mana_cost : f32;
	cast_callback : SpellCastCallback; // TODO(randy): NOI CALLBACKS CUNT
}
@XMacro
SpellType :: enum
{
	@Data("'none'", MAGIC_TYPE_big_spook, 0.0f, 0)
		none,
	@Data("'yeetus maximus'", MAGIC_TYPE_elemental, 10.0f, Fireball)
		fireball,
	@Data("'yeetus maximus'", MAGIC_TYPE_elemental, 10.0f, Yeet)
		yeet,
}

Spell :: struct
{
	type : SpellType;
	last_used : f32;
}

@ForwardDeclare(Chunk)
ForwardChunk :: _;

@GenerateComponentCode
Dummy2 :: _;

PhysicsBodyData :: struct
{
	shape : c2Shape;
	shape_type : c2ShapeType;
	material : PhysicsMaterial;
	mass_data : MassData;
	velocity : v2;
	force : v2;
	gravity_multiplier : f32;
	type : PhysicsBodyTypeFlags;
	collide_against : PhysicsBodyTypeFlags;
}

TreeType :: enum
{
	oak,
	birch,
	pine,
}

//~Entity

EntityProperty :: enum
{
	is_allocated,
	is_character,
	map_entity,
	positional,
	
	// TODO(randy): yeet this ugly shit
	interactable,
	interactable_left_click,
	
	lumber_axable,
	enemy,
	
	enchanter,
	elemental_skill_tree,
	item,
	
	sprite,
	flipbook,
	parallaxable,
	physical,
	blueprint,
	queryable,
	
	terrain_segment,
	
	tree,
}

ENTITY_PROPERTY_SIZE :: (ENTITY_PROPERTY_MAX / 64 + 1)

@SerialisableStruct(0) @Version(0)
Entity :: struct
{
	properties : u64[ENTITY_PROPERTY_SIZE];
	testint : i32;
	debug_name : char[100];
	
	position : v2;
	parallax_position : v2;
	
	sprite_data : SpriteRender;
	is_flipped : b8;
	is_background_sprite : b8; // Temp solution
	
	animation_flags : AnimationFlags;
	current_frame : i32;
	interval_mult : f32;
	frame_start_time : f32;
	
	// NOTE(randy): physics body
	physics : PhysicsBodyData;
	smooth_velocity : v2;
	
	// NOTE(randy): movement
	axis_x : f32;
	move_speed : f32;
	move_speed_mult : f32;
	
	// NOTE(randy): arcentity
	entity_type : ArcEntityType;
	@DoNotSerialise
		current_general_state : *char;
	current_animation_state : ArcEntityAnimationState;
	
	// NOTE(randy): Item shit
	item : Item;
	enchantments : Enchantment[MAX_ENCHANTMENTS];
	
	// NOTE(randy): interactable
	priority : f32;
	
	// NOTE(randy): blueprint
	structure_type : StructureType;
	remaining_items_in_blueprint : Item[MAX_ITEMS_IN_BLUEPRINT_RECIPE];
	
	durability : f32;
	
	tree_type : TreeType;
}

EntityPresetCategory :: enum
{
	none,
	resource,
	background,
}

@XMacro
EntityPresetTypeData:: struct
{
	print_name : char[20];
	setup_callback : EntityPresetCallback;
	category : EntityPresetCategory;
}
@XMacro
EntityPresetType:: enum
{
	@Data("'none'", 0, 0, 0)
		none,
	
	@Data("'Tree'", TreeEntityPresetCallback, ENTITY_PRESET_CATEGORY_resource)
		tree,
	
	@Data("'BG1 Tree'", BG1TreeEntityPresetCallback, ENTITY_PRESET_CATEGORY_background)
		bg1_tree,
	@Data("'BG2 Tree'", BG2TreeEntityPresetCallback, ENTITY_PRESET_CATEGORY_background)
		bg2_tree,
}


//~CA
//FLUID_COMPRESSION :: 0.1f
MINIMUM_AIR_PRESSURE :: 1.0f;
LIQUID_RESOLUTION :: 0.2f;
MAX_LIQUID_MASS :: 1.0f;

CellPropertiesType :: enum
{
	air,
	liquid,
	solid,
}

DynamicAirProperties :: struct
{
	pressure : f32;
}
DynamicLiquidProperties :: struct
{
	mass : f32;
}
DynamicSolidProperties :: struct
{
	hardness : f32;
}
DynamicCellProperties :: union
{
	air : DynamicAirProperties;
	liquid : DynamicLiquidProperties;
	solid : DynamicSolidProperties;
}

StaticAirProperties :: struct
{
	resting_temp : f32;
	test : b8;
}
StaticLiquidProperties :: struct
{
	default_mass : f32;
}
StaticSolidProperties :: struct
{
	default_mass : f32;
	restitution : f32;
	max_height : i32;
	crust_depth : i32;
}
StaticCellProperties :: union
{
	air : StaticAirProperties;
	liquid : StaticLiquidProperties;
	solid : StaticSolidProperties;
}
@XMacro
CellMaterialTypeData :: struct
{
	static_properties : StaticCellProperties;
	properties_type : CellPropertiesType;
}
@XMacro
CellMaterialType :: enum
{
	@Data(".static_properties.air = { .resting_temp = 2.0f, .test = 1}", CELL_PROPERTIES_TYPE_air)
		air,
	@Data(".static_properties.liquid = { .default_mass = 1.5f} ", CELL_PROPERTIES_TYPE_liquid)
		water,
	@Data(".static_properties.solid = { .default_mass = 1.0f, .max_height = 3, .crust_depth = 3 }", CELL_PROPERTIES_TYPE_solid)
		dirt,
	@Data(".static_properties.solid = { .default_mass = 0.5f, .max_height = 1, .crust_depth = 6 }", CELL_PROPERTIES_TYPE_solid)
		sand,
}

Cell :: struct
{
	material_type : CellMaterialType;
	dynamic_properties : DynamicCellProperties;
}

CellHelper :: struct
{
	cell : *Cell;
	
	dynamic_id : i32;
	x_position : i32;
	y_position : i32;
	parent_chunk : *Chunk;
}

//~Chunks
ChunkFlags :: flags
{
	is_allocated,
}

MAX_TERRAIN_VERT_IN_CHUNK :: 32
CHUNK_VERSION :: 0

Chunk :: struct
{
	flags : ChunkFlags;
	entities : *Entity[512]; // TODO(randy): Turn this into a nested array within rundata to prevent entity cap to any particular chunk
	entity_count : i32;
	pos: iv2;
	
	terrain_verts: v2[MAX_TERRAIN_VERT_IN_CHUNK];
}

/*
ChunkSave :: struct
{
	skele_chunk : SkeletonChunk;
	cells : Cell[CHUNK_SIZE][CHUNK_SIZE];
	entity_count : i32;
	entity_ids : *i32;
}
 */

RenderableType :: enum
{
	texture,
	text,
	filled_rect,
	line,
}

Texture :: struct
{
	texture : *Ts2dTexture;
	flags : i32;
	source : v4;
	destination : v4;
	tint : v4;
}

Text :: struct
{
	font : *Ts2dFont;
	flags : i32;
	colour : v4;
	pos : v2;
	font_scale : f32;
	text : char[512];
}

FilledRect :: struct
{
	colour : v4;
	rect : v4;
}

Line :: struct
{
	colour : v4;
	p1 : v2;
	p2 : v2;
}

MAX_QUEUED_RENDERABLES :: 1024
Renderable :: union
{
	texture : Texture;
	text : Text;
	filled_rect : FilledRect;
	line : Line;
}

SortRenderable :: struct
{
	data : Renderable;
	type : RenderableType;
	layer : f32;
	clip : v4;
}

CharacterState :: flags
{
	// disable_player_input,
	is_crafting,
	is_backpack_open,
	is_blueprinting,
	is_enchanting,
	is_in_elemental_skill_tree,
	arcane_mode,
	
	is_charging,
	in_action,
}

CharacterCombatState :: enum
{
	none,
	light_charge,
	heavy_charge,
	light_attack,
	heavy_attack,
}

MAX_ACTIVE_TIMERS :: 64
Timer :: struct
{
	is_allocated : b8;
	start_time : f32;
	duration : f32;
	complete_callback : TimerCompleteCallback;
}

CameraCue :: struct
{
	position : v2;
	
	weight : f32;
	
	zoom : f32;
}

//~WorldData - Serialised to each world save

MAX_HOTBAR_SLOTS :: 9;
MAX_INVENTORY_SLOTS :: 9;
MAX_SPELL_SLOTS :: 8
MAX_EQUIPMENT_SLOTS :: 6

@SerialisableStruct(0) @Version(0)
CharacterData :: struct
{
	inventory : Item[MAX_INVENTORY_SLOTS];
	inventory_size : i32;
	hotbar : Item[MAX_HOTBAR_SLOTS];
	hotbar_size : i32;
	active_hotbar_slot : i32;
	grabbed_item : Item;
	grabbed_item_offset : v2;
	@DoNotSerialise
		grabbed_item_origin_slot : *Item; // TODO(randy): serialisation issues?
	
	freehand_spell_slots : Spell[MAX_SPELL_SLOTS];
	freehand_spell_count : i32;
	
	equipment_slots : Item[MAX_EQUIPMENT_SLOTS];
	
	unlocked_elemental_skills : b8[ELEMENTAL_SKILL_TYPE_MAX];
	purchased_elemental_skills : ElementalSkillType[ELEMENTAL_SKILL_TYPE_MAX];
	elemental_skill_points : i32;
}

@SerialisableStruct(0) @Version(0)
WorldData :: struct
{
	character_data : CharacterData;
	elapsed_world_time : f32;
	character_chunk : iv2;
}

//~RunData - Game data used for run-time operations

MAX_POSITIONAL_ENTITIES :: 2048
MAX_FLOATING_ENTITIES :: 2048
ENTITY_TABLE_SIZE :: (MAX_POSITIONAL_ENTITIES + MAX_FLOATING_ENTITIES)

MAX_CAMERA_CUES :: 32

RunData :: struct
{
	timers : Timer[MAX_ACTIVE_TIMERS];
	
	chunks : Chunk[MAX_WORLD_CHUNKS];
	
	entities : Entity[ENTITY_TABLE_SIZE];
	
	world_name : char[50];
	world_path : char[300];
	world_chunks_path : char[300];
	world_data : WorldData;
	
	is_paused : b8;
	
	character_entity : *Entity;
	character_state : CharacterState;
	
	character_combat_state : CharacterCombatState;
	cooldown_timer : f32;
	
	current_e_interactable : *Entity;
	current_left_click_interactable : *Entity;
	
	engaged_station_entity : *Entity;
	current_blueprint_structure : *Entity;
	
	queued_renderables : SortRenderable[MAX_QUEUED_RENDERABLES];
	queued_renderable_count : i32;
	
	//~Camera System
	camera_cues : CameraCue[MAX_CAMERA_CUES];
	camera_cue_count : i32;
	
	lock_camera : b8;
	
	initial_camera_pos : v2;
	inital_zoom : f32;
	move_to_location : v2;
	move_to_zoom : f32;
	move_to_time : f32;
	move_to_start_time : f32;
	
	//camera_actions : CameraAction[MAX_CAMERA_ACTIONS];
	//camera_action_count : i32;
	
	//~Editor
	is_ejected : b8;
	editor_state : EditorState;
	debug_flags : DebugFlags;
	
	selected_entity : *Entity;
	selected_chunk : iv2;
}

// TODO: serialise client options
ClientData :: struct // Game client data, settings that should be remembered globally
{
	bloom : b32;
}