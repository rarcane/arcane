/* --- CONSTANTS --- */

MAX_POSITIONAL_ENTITIES :: 1024
MAX_FLOATING_ENTITIES :: 1024
MAX_ENTITIES :: MAX_POSITIONAL_ENTITIES + MAX_FLOATING_ENTITIES

MAX_OVERLAPPING_COLLIDERS :: 50
MAX_COLLISION_PAIRS :: 2048
MAX_STORAGE_SIZE :: 30
MAX_PARTICLE_AMOUNT :: 300
MAX_WORLD_CHUNKS :: 128
CHUNK_SIZE :: 256
MAX_DYNAMIC_CELLS :: 16384â€¬


/* --- ENUMS --- */

GeneralisedEntityType :: enum
{
    undefined,
	character,
	monster,
	animal,
	item,
	storage,
	resource,
	scenic,
	ground,
	pixel_object,
}

EditorState :: enum
{
	none,
	entity,
	terrain,
	collision,
	chunk,
}


/* --- FLAGS --- */

EntityFlags :: flags
{
	no_delete,
	force_floating,
}

ColliderFlags :: flags
{
	ground,
	player,
	entity,
	item,
	trigger,
}

AnimationFlags :: flags
{
	playing,
	reversing,
	repeat,
}

ParticleEmitterFlags :: flags
{
	repeat,
}

PixelFlags :: flags
{
	apply_gravity,
}

DebugFlags :: flags
{
	draw_world,
	draw_collision,
	draw_chunk_grid,
	debug_cell_view,
	manual_step,
}

ItemFlags :: flags
{
	resource,
	sword,
	bouncy,
}
ITEM_FLAGS_HOTBARABLE :: (ITEM_FLAGS_sword)

/* --- X-Macros --- */

@XMacro
StaticSpriteData :: struct
{
	texture_path : char[50];
	source : v4;
	offset : v2;
	@Ignore
		texture_atlas : *Ts2dTexture;
}
@XMacro
StaticSprite :: enum
{
	@Data("'invalid_texture'", "{0.0f, 0.0f, 64.0f, 64.0f}", "{0.0f, 0.0f}")
		INVALID,
		
	@Data("'scenic/biome_ground'", "{0.0f, 0.0f, 100.0f, 150.0f}", "{0.0f, 147.0f}")
		ground_arctic,
	@Data("'scenic/biome_ground'", "{100.0f, 0.0f, 100.0f, 150.0f}", "{0.0f, 147.0f}")
		ground_desert,
	@Data("'scenic/biome_ground'", "{200.0f, 0.0f, 100.0f, 150.0f}", "{0.0f, 147.0f}")
		ground_plains,
	
	@Data("'entity/player/temp_player'", "{0.0f, 0.0f, 14.0f, 35.0f}", "{0.0f, 0.0f}")
		player,
	
	// Background
	@Data("'scenic/mountains'", "{0.0f, 0.0f, 600.0f, 160.0f}", "{0.0f, 5.0f}")
		far_mountains,
	@Data("'scenic/mountains'", "{0.0f, 160.0f, 600.0f, 90.0f}", "{0.0f, 10.0f}")
		mid_mountains,
	
	@Data("'scenic/clouds'", "{0.0f, 0.0f, 80.0f, 25.0f}", "{0.0f, 0.0f}")
		cloud_v1,
	@Data("'scenic/clouds'", "{80.0f, 0.0f, 80.0f, 25.0f}", "{0.0f, 0.0f}")
		cloud_v2,
	@Data("'scenic/clouds'", "{160.0f, 0.0f, 80.0f, 25.0f}", "{0.0f, 0.0f}")
		cloud_v3,
	@Data("'scenic/clouds'", "{0.0f, 25.0f, 80.0f, 25.0f}", "{0.0f, 0.0f}")
		cloud_v4,
	@Data("'scenic/clouds'", "{80.0f, 25.0f, 80.0f, 25.0f}", "{0.0f, 0.0f}")
		cloud_v5,
	@Data("'scenic/clouds'", "{160.0f, 25.0f, 80.0f, 25.0f}", "{0.0f, 0.0f}")
		cloud_v6,
	
	// Forest
	@Data("'scenic/forest_ground'", "{0.0f, 40.0f, 100.0f, 90.0f }", "{20.0f, 87.0f}")
		ground_forest_flat,
	@Data("'scenic/forest_ground'", "{100.0f, 25.0f, 100.0f, 105.0f}", "{0.0f, 87.0f}")
		ground_forest_10_degree,
	
	@Data("'scenic/forest_ground'", "{0.0f, 0.0f, 100.0f, 4.0f}", "{0.0f, 0.0f}")
		ground_rocks_v1,
	@Data("'scenic/forest_ground'", "{0.0f, 4.0f, 100.0f, 4.0f}", "{0.0f, 0.0f}")
		ground_rocks_v2,
	
	@Data("'scenic/trees/pine_tree'", "{0.0f, 0.0f, 90.0f, 170.0f}", "{0.0f, 0.0f}")
		pine_tree_v1,
	
	@Data("'scenic/background/bg1_hills'", "{0.0f, 0.0f, 200.0f, 35.0f}", "{0.0f, 20.0f}")
		hills_1_v1,
	@Data("'scenic/background/bg1_hills'", "{0.0f, 35.0f, 200.0f, 35.0f}", "{0.0f, 20.0f}")
		hills_1_v2,
	
	@Data("'scenic/background/vegetation'", "{0.0f, 0.0f, 50.0f, 25.0f}", "{0.0f, 0.0f}")
		bg1_shrub_v1,
	@Data("'scenic/background/vegetation'", "{50.0f, 0.0f, 50.0f, 25.0f}", "{0.0f, 0.0f}")
		bg1_shrub_v2,
	@Data("'scenic/background/vegetation'", "{100.0f, 0.0f, 50.0f, 25.0f}", "{0.0f, 0.0f}")
		bg1_shrub_v3,
	
	@Data("'scenic/background/vegetation'", "{75.0f, 25.0f, 20.0f, 40.0f}", "{0.0f, 0.0f}")
		bg1_sapling_v1,
	@Data("'scenic/background/vegetation'", "{95.0f, 25.0f, 20.0f, 40.0f}", "{0.0f, 0.0f}")
		bg1_sapling_v2,
	@Data("'scenic/background/vegetation'", "{115.0f, 25.0f, 20.0f, 40.0f}", "{0.0f, 0.0f}")
		bg1_sapling_v3,
	
	@Data("'scenic/background/bg1_pine_tree'", "{0.0f, 0.0f, 90.0f, 170.0f}", "{0.0f, 0.0f}")
		bg1_pine_tree_v1,
	@Data("'scenic/background/bg1_pine_tree'", "{90.0f, 0.0f, 90.0f, 170.0f}", "{0.0f, 0.0f}")
		bg1_pine_tree_v2,
	
	@Data("'scenic/background/bg2_hills'", "{0.0f, 0.0f, 200.0f, 40.0f}", "{0.0f, 21.0f}")
		bg2_hills_v1,
	@Data("'scenic/background/bg2_hills'", "{0.0f, 40.0f, 200.0f, 40.0f}", "{0.0f, 21.0f}")
		bg2_hills_v2,
	
	@Data("'scenic/background/vegetation'", "{0.0f, 25.0f, 25.0f, 20.0f}", "{0.0f, -13.0f}")
		bg2_shrub_v1,
	@Data("'scenic/background/vegetation'", "{25.0f, 25.0f, 25.0f, 20.0f}", "{0.0f, -13.0f}")
		bg2_shrub_v2,
	@Data("'scenic/background/vegetation'", "{50.0f, 25.0f, 25.0f, 20.0f}", "{0.0f, -13.0f}")
		bg2_shrub_v3,
	
	@Data("'scenic/background/bg2_pine_tree'", "{0.0f, 0.0f, 40.0f, 110.0f}", "{0.0f, -5.0f}")
		bg2_pine_tree_v1,
	@Data("'scenic/background/bg2_pine_tree'", "{40.0f, 0.0f, 40.0f, 110.0f}", "{0.0f, -5.0f}")
		bg2_pine_tree_v2,
	
	@Data("'scenic/background/bg3_hills'", "{0.0f, 0.0f, 200.0f, 40.0f}", "{0.0f, 17.0f}")
		bg3_hills_v1,
	@Data("'scenic/background/vegetation'", "{0.0f, 45.0f, 15.0f, 10.0f}", "{0.0f, -20.0f}")
		bg3_shrub_v1,
	@Data("'scenic/background/vegetation'", "{15.0f, 45.0f, 15.0f, 10.0f}", "{0.0f, -20.0f}")
		bg3_shrub_v2,
	@Data("'scenic/background/vegetation'", "{30.0f, 45.0f, 15.0f, 10.0f}", "{0.0f, -20.0f}")
		bg3_shrub_v3,
	@Data("'scenic/background/vegetation'", "{45.0f, 45.0f, 15.0f, 10.0f}", "{0.0f, -20.0f}")
		bg3_shrub_v4,
	
	@Data("'scenic/background/bg3_pine_tree'", "{0.0f, 0.0f, 20.0f, 50.0f}", "{0.0f, -18.0f}")
		bg3_pine_tree_v1,
	@Data("'scenic/background/bg3_pine_tree'", "{20.0f, 0.0f, 20.0f, 50.0f}", "{0.0f, -18.0f}")
		bg3_pine_tree_v2,
	@Data("'scenic/background/bg3_pine_tree'", "{40.0f, 0.0f, 20.0f, 50.0f}", "{0.0f, -18.0f}")
		bg3_pine_tree_v3,
	@Data("'scenic/background/bg3_pine_tree'", "{60.0f, 0.0f, 20.0f, 50.0f}", "{0.0f, -18.0f}")
		bg3_pine_tree_v4,
	@Data("'scenic/background/bg3_pine_tree'", "{80.0f, 0.0f, 20.0f, 50.0f}", "{0.0f, -18.0f}")
		bg3_pine_tree_v5,
	@Data("'scenic/background/bg3_pine_tree'", "{100.0f, 0.0f, 20.0f, 50.0f}", "{0.0f, -18.0f}")
		bg3_pine_tree_v6,
	@Data("'scenic/background/bg3_pine_tree'", "{120.0f, 0.0f, 20.0f, 50.0f}", "{0.0f, -18.0f}")
		bg3_pine_tree_v7,
	@Data("'scenic/background/bg3_pine_tree'", "{140.0f, 0.0f, 20.0f, 50.0f}", "{0.0f, -18.0f}")
		bg3_pine_tree_v8,
	
	// Icons
	@Data("'icon/axis_icons'", "{0.0f, 0.0f, 7.0f, 40.0f}", "{0.0f, 0.0f}")
		y_axis_arrow_icon,
	@Data("'icon/axis_icons'", "{0.0f, 33.0f, 40.0f, 7.0f}", "{0.0f, 0.0f}")
		x_axis_arrow_icon,
	@Data("'icon/axis_icons'", "{33.0f, 0.0f, 7.0f, 7.0f}", "{0.0f, 0.0f}")
		circle_icon,

	// NOTE(randy): Structures
	@Data("'structures/crafting_stump'", "{0.0f, 0.0f, 32.0f, 32.0f}", "{0.0f, 0.0f}")
		crafting_stump,

	// NOTE(randy): Items
	@Data("'item/flint_sword'", "{0.0f, 0.0f, 16.0f, 16.0f}", "{6.0f, 2.0f}")
		flint_sword_icon,
	@Data("'item/flint_sword_ground'", "{0.0f, 0.0f, 24.0f, 24.0f}", "{0.0f, 0.0f}")
		flint_sword_ground,
	@Data("'item/flint'", "{0.0f, 0.0f, 16.0f, 16.0f}", "{0.0f, 0.0f}")
		flint,
	@Data("'item/twig'", "{0.0f, 0.0f, 16.0f, 16.0f}", "{0.0f, 0.0f}")
		twig,
}

@XMacro
DynamicSpriteData :: struct
{
	texture_path : char[50];
	source : v4;
	offset : v2;
	frames : i32;
	frame_interval : f32;
	
	@Ignore
		texture_atlas : *Ts2dTexture;
}
@XMacro
DynamicSprite :: enum
{
	@Data("'invalid_texture'", "{0.0f, 0.0f, 64.0f, 64.0f}", "{0.0f, 0.0f}", 0, 0.0f)
		INVALID,
		
	@Data("'entity/player/player_animations'", "{0.0f, 192.0f, 64.0f, 64.0f}", "{0.0f, 0.0f}", 4, 0.15f)
		player_idle,
	@Data("'entity/player/player_animations'", "{0.0f, 256.0f, 64.0f, 64.0f}", "{0.0f, 0.0f}", 8, 0.1f)
		player_walking,
	@Data("'entity/player/player_animations'", "{0.0f, 320.0f, 64.0f, 64.0f}", "{0.0f, 0.0f}", 8, 0.1f)
		player_sprinting,
		
	@Data("'scenic/trees/birch_idle'", "{0.0f, 0.0f, 120.0f, 160.0f}", "{0.0f, 0.0f}", 6, 0.1f)
		birch_tree1,
	@Data("'scenic/trees/birch_idle'", "{0.0f, 160.0f, 120.0f, 160.0f}", "{0.0f, 0.0f}", 6, 0.1f)
		birch_tree2,
	@Data("'scenic/trees/birch_idle'", "{0.0f, 320.0f, 120.0f, 160.0f}", "{0.0f, 0.0f}", 6, 0.1f)
		birch_tree3,
	@Data("'scenic/trees/birch_idle'", "{0.0f, 480.0f, 120.0f, 160.0f}", "{0.0f, 0.0f}", 6, 0.1f)
		birch_tree4,
}

MAX_SUB_SPRITES :: 5

@XMacro
ArcEntityAnimationStateData :: struct
{
	dynamic_sprite : DynamicSprite;
}
@XMacro
ArcEntityAnimationState :: enum
{
	@Data(DYNAMIC_SPRITE_player_idle)
		player_idle,
	@Data(DYNAMIC_SPRITE_player_walking)
		player_walking,
	@Data(DYNAMIC_SPRITE_player_sprinting)
		player_sprinting,
}

@XMacro
ArcEntityTypeData :: struct
{
	general_states : *char[10];
	animation_states : ArcEntityAnimationState[20];
}
@XMacro
ArcEntityType :: enum
{
	@Data("{'Idle', 'Walking', 'Sprinting'}", "{ARC_ENTITY_ANIMATION_STATE_player_idle, ARC_ENTITY_ANIMATION_STATE_player_walking, ARC_ENTITY_ANIMATION_STATE_player_sprinting}")
		player,
}

@XMacro
ItemTypeData :: struct
{
	print_name : char[20];
	icon_sprite : StaticSprite;
	ground_sprite : StaticSprite;
	max_stack_size : i32;
	flags : ItemFlags;
}
@XMacro
ItemType :: enum
{
	@Data("'none'", STATIC_SPRITE_INVALID, STATIC_SPRITE_INVALID, 0, 0)
		none,
	@Data("'Flint Sword'", STATIC_SPRITE_flint_sword_icon, STATIC_SPRITE_flint_sword_ground, 1, ITEM_FLAGS_sword)
		flint_sword,
	@Data("'Flint'", STATIC_SPRITE_flint, STATIC_SPRITE_flint, 8, 0)
		flint,
	@Data("'Twig'", STATIC_SPRITE_twig, STATIC_SPRITE_twig, 8, 0)
		twig,
}

/* --- COMPONENTS --- */

@ForwardDeclare(Entity)
ForwardEntity :: _;

@Component @SerialisableStruct
PositionComponent :: struct
{
	position : v2;
}

@Component @SerialisableStruct
SpriteComponent :: struct
{
	sprite_data : SpriteData;
	@Editable
	is_flipped : b8;
	is_background_sprite : b8; // Temp solution
}

@Component @SerialisableStruct
AnimationComponent :: struct
{
	flags : AnimationFlags;
	current_frame : i32;
	interval_mult : f32;
	frame_start_time : f32;
}

Line :: struct
{
	p1 : v2;
	p2 : v2;
}

c2Shape :: union
{
	aabb : c2AABB;
	capsule : c2Capsule;
	circle : c2Circle;
	poly : c2Poly;
	line : Line;
}

c2ShapeType :: enum
{
	aabb,
	capsule,
	circle,
	poly,
	line,
}

PhysicsMaterial :: struct
{
	density : f32;
	restitution : f32;
	static_friction : f32;
	dynamic_friction : f32;
}

MassData :: struct
{
	mass : f32;
	inv_mass : f32;
}

PhysicsBodyTypeFlags :: flags
{
	ground,
	item,
	character,
}

@Component @SerialisableStruct
PhysicsBodyComponent :: struct
{
	shape : c2Shape;
	shape_type : c2ShapeType;
	material : PhysicsMaterial;
	mass_data : MassData;
	velocity : v2;
	force : v2;
	gravity_multiplier : f32;
	type : PhysicsBodyTypeFlags;
	collide_against : PhysicsBodyTypeFlags;
}

@Component @SerialisableStruct
MovementComponent :: struct
{
	axis_x : f32;
	move_speed : f32;
	move_speed_mult : f32;
}

@Component @SerialisableStruct
ArcEntityComponent :: struct
{
	entity_type : ArcEntityType;
	current_general_state : *char;
	current_animation_state : ArcEntityAnimationState;
}

Item :: struct
{
	type : ItemType;
	stack_size : i32;
}
@Component @SerialisableStruct
ItemComponent :: struct
{
	item : Item;
}

@Component @SerialisableStruct
TriggerComponent :: struct
{
	enter_trigger_callback : TriggerCallback;
	exit_trigger_callback : TriggerCallback;
	previous_overlaps : OverlappedColliderInfo[MAX_OVERLAPPING_COLLIDERS];
	previous_overlaps_count : i32;
	trigger_against : b8;
}

/*
@Component @SerialisableStruct
StorageComponent :: struct
{
	storage_size : i32;
	items : *ItemComponent[MAX_STORAGE_SIZE];
}
*/

@Component @SerialisableStruct
ParallaxComponent :: struct
{
	parallax_amount : v2;
	desired_position : v2;
}

@Component @SerialisableStruct
ParticleEmitterComponent :: struct
{
	life_time : f32;
	start_time : f32;
	flags : ParticleEmitterFlags;
	particles : Particle[MAX_PARTICLE_AMOUNT]; // Need to put this somewhere else?
	particle_count : i32;
	free_particle_index : i32;
	begin_callback : EmitterBeginCallback;
	finish_callback : EmitterFinishCallback;
}

MAX_HOTBAR_SLOTS :: 9;
MAX_INVENTORY_SLOTS :: 9;
@Component @SerialisableStruct
PlayerDataComponent :: struct
{
	inventory : Item[MAX_INVENTORY_SLOTS];
	inventory_size : i32;
	hotbar : Item[MAX_HOTBAR_SLOTS];
	hotbar_size : i32;
	active_hotbar_slot : i32;
	grabbed_item : Item;
	grabbed_item_offset : v2;
	grabbed_item_origin_slot : *Item;
}

@ForwardDeclare(Chunk)
ForwardChunk :: _;

@GenerateComponentCode
Dummy2 :: _;


/* ----------------------------------------- */
/* ----------- CELLULAR AUTOMATA ----------- */
/* ----------------------------------------- */

//FLUID_COMPRESSION :: 0.1f
MINIMUM_AIR_PRESSURE :: 1.0f;
LIQUID_RESOLUTION :: 0.2f;
MAX_LIQUID_MASS :: 1.0f;

CellPropertiesType :: enum
{
	air,
	liquid,
	solid,
}

DynamicAirProperties :: struct
{
	pressure : f32;
}
DynamicLiquidProperties :: struct
{
	mass : f32;
}
DynamicSolidProperties :: struct
{
	hardness : f32;
}
DynamicCellProperties :: union
{
	air : DynamicAirProperties;
	liquid : DynamicLiquidProperties;
	solid : DynamicSolidProperties;
}

StaticAirProperties :: struct
{
	resting_temp : f32;
	test : b8;
}
StaticLiquidProperties :: struct
{
	default_mass : f32;
}
StaticSolidProperties :: struct
{
	default_mass : f32;
	restitution : f32;
	max_height : i32;
	crust_depth : i32;
}
StaticCellProperties :: union
{
	air : StaticAirProperties;
	liquid : StaticLiquidProperties;
	solid : StaticSolidProperties;
}
@XMacro
CellMaterialTypeData :: struct
{
	static_properties : StaticCellProperties;
	properties_type : CellPropertiesType;
}
@XMacro
CellMaterialType :: enum
{
	@Data(".static_properties.air = { .resting_temp = 2.0f, .test = 1}", CELL_PROPERTIES_TYPE_air)
		air,
	@Data(".static_properties.liquid = { .default_mass = 1.5f} ", CELL_PROPERTIES_TYPE_liquid)
		water,
	@Data(".static_properties.solid = { .default_mass = 1.0f, .max_height = 3, .crust_depth = 3 }", CELL_PROPERTIES_TYPE_solid)
		dirt,
	@Data(".static_properties.solid = { .default_mass = 0.5f, .max_height = 1, .crust_depth = 6 }", CELL_PROPERTIES_TYPE_solid)
		sand,
}

Cell :: struct
{
	material_type : CellMaterialType;
	dynamic_properties : DynamicCellProperties;
}

CellHelper :: struct
{
	cell : *Cell;
	
	dynamic_id : i32;
	x_position : i32;
	y_position : i32;
	parent_chunk : *Chunk;
}


/* ---------------------------------- */
/* ----------- WORLD DATA ----------- */
/* ---------------------------------- */

@SerialisableStruct
Entity :: struct
{
	entity_id : i32;
	component_ids : i32[COMPONENT_MAX];
	name : char[20];
	
	flags : EntityFlags;
	generalised_type : GeneralisedEntityType;
}

CELL_CHUNKS_IN_CHUNK :: CHUNK_SIZE / CELL_CHUNK_SIZE
CHUNK_AREA :: CHUNK_SIZE * CHUNK_SIZE
Chunk :: struct
{
	is_valid : b8;
	remain_loaded : b8; // Is cleared each frame, systems need to provide this chunk with a reason to keep livin.
	entity_ids : *i32;
	entity_count : i32;
	x_index : i32;
	y_index : i32;
	
	cells : Cell[CHUNK_SIZE][CHUNK_SIZE];
	texture : Ts2dTexture;
}

ChunkSave :: struct
{
	skele_chunk : SkeletonChunk;
	cells : Cell[CHUNK_SIZE][CHUNK_SIZE];
	entity_count : i32;
	entity_ids : *i32;
}

@SerialisableStruct
WorldSaveData :: struct
{
	elapsed_world_time : f32;
	test_ptr : *i32;
}

EntityEditorData :: struct
{
	selected_entity : *Entity;
}
TerrainEditorData :: struct
{
	selected_cell : *Cell;
	selection_start : v2;
	selection_end : v2;
}
CollisionEditorData :: struct
{
	selected_ground_seg : *Entity;
	is_seg_grabbed : b8;
	grabbed_seg_pos : v2;
}
ChunkEditorData :: struct
{
	is_chunk_selected : b8;
	selected_chunk : SkeletonChunk;
}

RunData :: struct // Game data used for run-time operations
{
	active_chunks : Chunk[MAX_WORLD_CHUNKS];
	active_chunk_count : i32;

	// TODO(randy): Extract these into their own dynamically allocated buffer
	save_job_index : i32;
	entities_snapshot : Entity[MAX_ENTITIES];
	entity_count_snapshot : i32;
	entity_components_snapshot : ComponentSet;
	positional_entity_ids_snapshot : i32[MAX_POSITIONAL_ENTITIES];
	positional_entity_id_count_snapshot : i32;
	chunk_saves : ChunkSave[MAX_WORLD_CHUNKS];
	chunk_save_count : i32;

	load_job_index : i32;
	not_first_time_temp : b8;
	loaded_entities : EntitySave[MAX_ENTITIES];
	loaded_entity_count : i32;
	loaded_entity_components : ComponentSet;
	loaded_positional_entity_ids : i32[MAX_POSITIONAL_ENTITIES];
	loaded_positional_entity_id_count : i32;
	chunk_load_queue : ChunkSave[MAX_WORLD_CHUNKS];
	chunk_load_queue_count : i32;
	chunk_generate_queue : *ChunkSave[MAX_WORLD_CHUNKS];
	chunk_generate_queue_count : i32;

	entities : Entity[MAX_ENTITIES];
	entity_count : i32;
	free_entity_id : i32;
	positional_entity_ids : i32[MAX_POSITIONAL_ENTITIES];
	positional_entity_id_count : i32;
	floating_entity_ids : i32[MAX_FLOATING_ENTITIES];
	floating_entity_id_count : i32;
	
	entity_components : ComponentSet;
	
	world_name : char[50];
	world_path : char[300];
	world_chunks_path : char[300];
	
	world : WorldSaveData;
	
	chunk_texture_update_queue : *Chunk[MAX_WORLD_CHUNKS];
	chunk_texture_update_queue_count : i32;
	
	disable_chunk_loaded_based_off_view : b8;
	
	dynamic_cells : CellHelper[MAX_DYNAMIC_CELLS];
	dynamic_cell_count : i32;
	free_dynamic_cell_id : i32;
	queued_dynamic_cells : CellHelper[MAX_DYNAMIC_CELLS];
	queued_dynamic_cell_count : i32;
	
	character_entity : *Entity;
	
	/* ~ Editor ~ */
	editor_state : EditorState;
	saved_debug_flags : DebugFlags;
	debug_flags : DebugFlags;
	entity_editor : EntityEditorData;
	terrain_editor : TerrainEditorData;
	collision_editor : CollisionEditorData;
	chunk_editor : ChunkEditorData;
}

// TODO: serialise client options
ClientData :: struct // Game client data, settings that should be remembered globally
{
	/* ~ Player-controlled options ~ */
	bloom : b32;
}